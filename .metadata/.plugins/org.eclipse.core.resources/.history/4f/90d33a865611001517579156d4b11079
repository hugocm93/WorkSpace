package Interface;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;

import org.imgscalr.Scalr;

import Controladores.ControladorFluxo;
import Controladores.ControladorMapa;
import Controladores.ControladorPainelOpcoes;

public class PainelMapa extends JPanel implements MouseListener{

	private static final long serialVersionUID = 1L;

	private String path1 = System.getProperty("user.dir");
	private String path2 = "/src/zImagens/Mapas/";
	private String path5 = "/src/zImagens/Pinos/";
	private BufferedImage[] imgPinos = new BufferedImage[6];
	private String[] cores = ControladorPainelOpcoes.getNomesDasImagensDosJogadores();
	private BufferedImage imgMapa;
	private JLabel[] pins = new JLabel[51];



	public PainelMapa(){
		try {
			File imgMapaFile = new File(path1 + path2 + "war_tabuleiro_com_nomes.png");
			imgMapa = ImageIO.read(imgMapaFile);

			for(int i=0; i<6 && cores[i]!=null ; i++){
				File imgPinosJogadorFiles = new File(path1 + path5 + cores[i]);
				imgPinos[i] = ImageIO.read(imgPinosJogadorFiles);
			}
		}
		catch (IOException e) {
			System.out.println("Imagem nï¿½o encontrada.");
		}

		
		this.setLayout(new BorderLayout());
		ControladorFluxo.criaPainelOpcoes();
		ControladorFluxo.irPainelOpcoes();

		ControladorMapa.sortearTerritorios();


		this.repaint();


	}

	public void paintComponent(Graphics g) {
		super.paintComponents(g);

		g.drawImage(imgMapa, 0, - Constantes.getDeslocamento(), Constantes.getLargura(), Constantes.getAltura() , null);
		for(int i = 0;i<6;i++){
			ArrayList<Point> pontos = ControladorMapa.colocarBase(cores[i]);
		
			int j=0;
			for(Point p : pontos){
				
				pins[j] = new JLabel();
				pins[j].setIcon(new ImageIcon(Scalr.resize(imgPinos[i], 18)));
				pins[j].setBounds(p.x, p.y, 25, 25);	
				pins[j].setVisible(true);
				this.add(pins[j]);
                j++;
			}
		}

		g.finalize();
	}

	public void mouseClicked(MouseEvent e) {
		if (e.isPopupTrigger() == false){
			String aux = ControladorMapa.detectaTerritorio(e, imgMapa);
			if(aux!=null){
				doPop(e,aux);
			}
		}
	}

	public void mousePressed(MouseEvent e) {
		String aux = ControladorMapa.detectaTerritorio(e, imgMapa);
		if(aux!=null){
			doPop(e);
		}

	}
	public void mouseReleased(MouseEvent e) {

	}

	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}

	private void doPop(MouseEvent e){
		PopUp menu = new PopUp();
		menu.show(e.getComponent(), e.getX(), e.getY());
	}

	private void doPop(MouseEvent e, String s){
		PopUp menu = new PopUp(s);
		menu.show(e.getComponent(), e.getX(), e.getY());
	}
}
