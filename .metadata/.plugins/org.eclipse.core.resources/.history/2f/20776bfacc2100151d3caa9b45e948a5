package Interface;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.imgscalr.Scalr;

import Controladores.ControladorFluxo;
import Controladores.ControladorMapa;
import Controladores.ControladorPainelOpcoes;

public class PainelOpcoes extends JPanel implements ActionListener{

	private static final long serialVersionUID = 1L;
	private JButton botaoDado = new JButton();
	private JButton botaoFimDaJogada = new JButton();
	private JButton botaoFimAtaque = new JButton();
	private JButton botaoObjetivo = new JButton();
	private String path1 = System.getProperty("user.dir");
	private String path2 = "/src/zImagens/Background/";
	private String path4 = "/src/zImagens/Botoes/";
	private String path5 = "/src/zImagens/Pinos/";
	private String[] cores = ControladorPainelOpcoes.getNomesDasImagensDosJogadores();
	private BufferedImage imgFimDaJogada;
	private BufferedImage imgFundo;
	private BufferedImage imgDados;
	private BufferedImage imgSeta;
	private BufferedImage imgJogador;
	private BufferedImage imgFimAtaque;
	private BufferedImage imgAlvo;
	private BufferedImage[] imgPinos = new BufferedImage[6];
	private JLabel nomeJogador;
	private JLabel[] ordemDosJogadores = new JLabel[6];
	private JLabel exeRestantes;
	private JLabel helpText;


	public PainelOpcoes(){

		try {
			File imgMapaFile = new File(path1 + path2 + "war_tabuleiro_fundo3.png");
			imgFundo = ImageIO.read(imgMapaFile);

			File imgPlayFile = new File(path1 + path4 + "botaoDados2.png");
			imgDados = ImageIO.read(imgPlayFile);

			File imgPlayFile1 = new File(path1 + path4 + "botaoFimDaJogada.png");
			imgFimDaJogada = ImageIO.read(imgPlayFile1);

			File imgJogadorFile = new File(path1 + path5 + ControladorPainelOpcoes.jogadorAtual("cor"));
			imgJogador = ImageIO.read(imgJogadorFile);

			File imgPlayFile2 = new File(path1 + path4 + "fimAtaque.png");
			imgFimAtaque = ImageIO.read(imgPlayFile2);
			
			File imgObj = new File(path1 + path4 + "obj.png");
			imgAlvo = ImageIO.read(imgObj);


			for(int i=0; i<6 && cores[i]!=null ; i++){
				File imgPinosJogadorFiles = new File(path1 + path5 + cores[i]);
				imgPinos[i] = ImageIO.read(imgPinosJogadorFiles);
			}
		}
		catch (IOException e) {
			System.out.println("Imagem nÃ£o encontrada.");
		}

		this.setPreferredSize(new Dimension(1024,Constantes.alturaPainel));
		this.setLayout(new FlowLayout());


		botaoFimDaJogada.setIcon(new ImageIcon(imgFimDaJogada));
		botaoFimDaJogada.setOpaque(false);
		botaoFimDaJogada.setContentAreaFilled(false);
		botaoFimDaJogada.setBorderPainted(false);
		botaoFimDaJogada.addActionListener(this);
		this.add(botaoFimDaJogada);
		botaoFimDaJogada.setVisible(true);

		botaoFimAtaque.setIcon(new ImageIcon(imgFimAtaque));
		botaoFimAtaque.setOpaque(false);
		botaoFimAtaque.setContentAreaFilled(false);
		botaoFimAtaque.setBorderPainted(false);
		botaoFimAtaque.addActionListener(this);
		this.add(botaoFimAtaque);
		botaoFimAtaque.setVisible(true);
		
		botaoObjetivo.setIcon(new ImageIcon(Scalr.resize(imgAlvo, 50)));
		botaoObjetivo.setOpaque(false);
		botaoObjetivo.setContentAreaFilled(false);
		botaoObjetivo.setBorderPainted(false);
		botaoObjetivo.addActionListener(this);
		this.add(botaoObjetivo);
		botaoObjetivo.setVisible(true);

		botaoDado.setIcon(new ImageIcon(Scalr.resize(imgDados, 50)));
		botaoDado.setSize(50, 50);
		botaoDado.setVisible(true);
		botaoDado.setOpaque(false);
		botaoDado.setContentAreaFilled(false);
		botaoDado.setBorderPainted(false);
		botaoDado.addActionListener(this);
		this.add(botaoDado);
		botaoDado.setVisible(true);

		for ( int i = 0; i<6 && imgPinos[i]!=null ; i++ ){
			ordemDosJogadores[i] = new JLabel();
			ordemDosJogadores[i].setIcon(new ImageIcon(Scalr.resize(imgPinos[i], 20)));
			ordemDosJogadores[i].setVisible(true);
			this.add(ordemDosJogadores[i]);
		}

		nomeJogador = new JLabel();
		nomeJogador.setForeground(Color.white);
		nomeJogador.setText(ControladorPainelOpcoes.jogadorAtual("nome"));
		nomeJogador.setVisible(true);
		this.add(nomeJogador);

		exeRestantes = new JLabel();
		exeRestantes.setForeground(Color.white);
		exeRestantes.setFont(new Font("default", 25, 15));
		exeRestantes.setText(ControladorPainelOpcoes.jogadorAtual("Exercitos restantes: " + "exer"));
		exeRestantes.setVisible(true);
		this.add(exeRestantes);


		helpText = new JLabel();

		helpText.setForeground(Color.white);
		helpText.setFont(new Font("default", 20, 12));
		helpText.setText("Dica:");
		helpText.setVisible(true);

		this.add(helpText, BorderLayout.CENTER);

		this.setVisible(true);
		this.repaint();
	}

	public void paintComponent(Graphics g) {
		super.paintComponents(g);

		g.drawImage(imgFundo, 0, 0, Constantes.getLargura(), 200 , null);
		botaoFimDaJogada.setBounds(Constantes.getLargura() -160,30 ,130, 50);

		botaoFimAtaque.setBounds(Constantes.getLargura() -300, 30 ,130, 50);

		g.drawImage(imgJogador, 20, 20, 65, 65 , null);

		nomeJogador.setBounds(20, 88, 150, 20);
		exeRestantes.setBounds(this.getBounds().width-200, this.getBounds().height-50, 200,50);
		helpText.setBounds(this.getBounds().width-750, this.getBounds().height-130, 600,50);
		botaoDado.setBounds(this.getBounds().width-400, this.getBounds().height-90, 50, 50);
		botaoObjetivo.setBounds(this.getBounds().width-150, this.getBounds().height-90, 50, 50);

		for ( int i = 0, j = 120; i<6 && imgPinos[i]!=null ; i++, j=j+22 ){
			ordemDosJogadores[i].setBounds(j, 0, 20, 20);			
		}

		try{
			File imgSetaFile = new File(path1 + path2 + "seta.png");
			imgSeta = ImageIO.read(imgSetaFile);

			File imgJogadorFile = new File(path1 + path5 + ControladorPainelOpcoes.jogadorAtual("cor")); 
			imgJogador = ImageIO.read(imgJogadorFile);
		} catch (IOException e) {

			e.printStackTrace();
		}

		nomeJogador.setText("");
		nomeJogador.setText(ControladorPainelOpcoes.jogadorAtual("nome"));

		exeRestantes.setText("");
		exeRestantes.setText("Exercitos restantes: " + ControladorPainelOpcoes.jogadorAtual("exer"));

		Fase f = ControladorPainelOpcoes.getFase();
		switch(f){

		case RECEBENDO:
			helpText.setText("Dica: recebendo exercitos (clique no territorio para add.)");
			break;

		case ATAQUE:
			helpText.setText("Dica: atacando (clique nos territorios participantes)");
			break;
		case ATAQUEDESLOCAMENTO:
			helpText.setText("Dica: deslocando no ataque");
			break;
		case CARTA:
			helpText.setText("Dica: pegando carta");
			break;
		case DESLOCAMENTO:
			helpText.setText("Dica: deslocando exercitos entre territorios fronteiricos (arraste de um para o outro)");
			break;

		case PRIM:
			helpText.setText("Dica: distribuindo exercitos (clique no territorio para add.)");

			break;
			
		case FIM:
			helpText.setText("Dica: finalize a jogada");
			break;

		default:
			break;

		}

		if(ControladorPainelOpcoes.permitidoPassar(ControladorPainelOpcoes.jogadorAtual("nome"))){
			botaoFimDaJogada.setEnabled(true);
		}
		else{
			botaoFimDaJogada.setEnabled(false);
		}

		if(!ControladorMapa.isFimAtaque() && ControladorPainelOpcoes.permitidoPassar(ControladorPainelOpcoes.jogadorAtual("nome")) && ControladorPainelOpcoes.isNotPrimeiraRodada()){
			botaoFimAtaque.setEnabled(true);
		}
		else{
			botaoFimAtaque.setEnabled(false);
		}
		
		if(ControladorPainelOpcoes.getFase()==Fase.ATAQUE && ControladorPainelOpcoes.podeAtacar()==true){
			botaoDado.setEnabled(true);
		}
		else{
			botaoDado.setEnabled(false);
		}

		for(int i=0;i<6;i++){
			if(ControladorPainelOpcoes.jogadorAtual("cor") == cores[i]){
				g.drawImage(imgSeta, 109 + 22*i, 16, 40, 40, null);
			}
		}
		g.finalize();
	}


	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == botaoDado){
			ControladorFluxo.novoFrameDados();
		}
		if(e.getSource() == botaoFimDaJogada){
			ControladorFluxo.novoFrameFimDaJogada();
		}

		if(e.getSource() == botaoFimAtaque){
			ControladorPainelOpcoes.fimAtaque();
			botaoFimAtaque.setEnabled(false);
			
			ControladorPainelOpcoes.snapShot();
		}

	}

}
